# СМЫСЛ ФАЙЛА - извлечь из БД домашки в виде списка из кортежей
# когда к тебе на сервер приходит GET HTTP-запрос

# проблема - нужно придумать способ как список из кортежей перевести в список из словарей

# connect - файл, который подключается к базе данных
from database import connect
# complete - функция, выполняющая 1 из 4 операций (select, insert, update, delete)
from database.connect import complete
# FastAPI - главный класс, с помощью него создаем веб-приложение
from fastapi import FastAPI
# json - библиотеки для сериализации/десериализации данных в(из) формат(а) json
import json
# uvicorn - ASGI-сервер (асинхронный сервер) для обработки запросов от клиентов 
import uvicorn
# pydantic - библиотеки для валидации (проверки на правильность) данных которые приходят на сервер (бэкенд)
# BaseModel - главный класс, от которого с помощью наследования можно создавать свои модели валидации
# Модель валидации - класс, в котором мы задаем какие свойства (и какие типы данных) должны быть у объекта, который приходит на вход
# Пример - если мы ожидаем, что в декоратор придет домашка - то мы должны описать из чего она состоит (какие ключи будут в json)
from pydantic import BaseModel
# sqlalchemy - библиотеки для работы с базами данных SQL
# select - функция, которая выполняет операции чтения данных из БД
from sqlalchemy import select
# операцию можно применить только к конкретной(-ым) таблице(-ам)
# hometasks - таблица с домашками, из которой мы и извлекаем домашки в виде списка из кортежей
from database.models.mod_mag import hometasks

# создаем веб-приложение
app = FastAPI()

# опишем класс !

# обработчик метода GET HTTP-запроса
# .get, .post, .put, .patch, .delete - в зависимости от метода - мы должны поменять метод в коде
@app.get('/')
# в функции пустые скобки (нет параметров), потому что у GET запроса нет body (тела)
# это значит, что никакие данные с frontend'a не приходят
# наш пример - это значит, чтобы получить все домашки - для этого не нужно отправлять каких-то данных
async def get_homework():
    # составляем запрос к базе данных
    # select - и есть операция, hometasks - таблица, к которой производится операция
    # в нашем случае - берем вообще все домашки из таблицы
    query = select(hometasks)
    # передаем запрос в функцию complete, которая вернет результат выполнения запроса (данные)
    # .all() - нам нужны все строки, которые выберутся в результате запроса
    # записываем в переменную result - все домашки в виде списка из кортежей, а потом выводим на консоль

    # x - список из кортежей
    x = complete(query).all()

    print(f'\nРЕЗУЛЬТАТ: \n {x} \n\n\n')


    list_of_dicts = list(map(lambda x: dict(course_id=x[0], block_id=x[1], order_id=x[2], task_id=x[3], course=x[4], points=x[5], answer=x[6], condition=x[7]), x))

    print(f'\nРЕЗУЛЬТАТ: \n {list_of_dicts} \n\n\n')

    # преобразование списка из словарей в json
    result = json.dumps(list_of_dicts)
    return result
    

# запускается сервер
if __name__ == '__main__':
    # app - веб-приложение, которое нужно разместить на сервере
    # host - ip-адрес (локальный компьютер)
    uvicorn.run(app, host='127.0.0.1', port=8000)
